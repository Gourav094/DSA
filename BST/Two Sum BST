//Two Sum BST
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class BSTiterator{
    private:
    // reverse->true=before;
    // reverse->false=next;
        stack<TreeNode*> s;
        bool reverse=true;
    void Pushstack(TreeNode* root){
        while(root){
            s.push(root);
            if(reverse == true){
                root=root->right;
            }
            else{
                root=root->left;
            }
        }
    }
    
    public:
    BSTiterator(TreeNode* root,bool isreverse) {
        reverse=isreverse;
        Pushstack(root);
    }
    bool hasNext() {
        return !s.empty();
    }
    int next() {
        TreeNode* temp=s.top();
        s.pop();
        if(!reverse) Pushstack(temp->right);
        else{Pushstack(temp->left);}
        return temp->val;
    }
    
};

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false;
        BSTiterator l(root,false);       
        BSTiterator r(root,true);
        int i=l.next();
        int j=r.next(); //before
        while(i < j){
            if(i+j == k) return true;
            else if(i+j < k){
                i=l.next();
            }
            else j=r.next();
        }
        return false;

    }
};
