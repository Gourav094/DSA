//using set 
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> hash;
        int longest=0;
        for(int num:nums){
            hash.insert(num);
        }
        for(int num:nums){
            if(!hash.count(num-1)){
                int current=1;
                int curnum=num;
                while(hash.count(num+current)){
                    curnum+=1;
                    current+=1;
                }
                longest=max(current,longest);
            }
        }
        return longest;
    }
};


//using hashmaps approach
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> mp(256,-1);
        int left=0,right=0,len=0;
        int n=s.size();
        while(right<n){
            if(mp[s[right]] != -1){
                left=max(left,mp[s[right]]+1);
            }
            mp[s[right]]=right;
            len=max(len,right-left+1);
            right++;
        }
        return len;
    }
};
