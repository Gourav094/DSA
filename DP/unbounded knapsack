//Recursive way
int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
        if(N==0 || W==0){
            return 0;
        }
        if(wt[N-1]<=W){
            return max(val[N-1]+knapSack(N,W-wt[N-1],val,wt),knapSack(N-1,W,val,wt));
        }
        else{
            return knapSack(N-1,W,val,wt);
        }
    }
//Memoize
int knapSack(int N, int W, int val[], int wt[])
    {
        
        int T[N+1][W+1];
        memset(T,-1,sizeof(T));
        if(N==0 || W==0){
            return 0;
        }
        if(T[N][W]!=-1){
            return T[N][W];
        }
        if(wt[N-1]<=W){
            return T[N][W]=max(val[N-1]+knapSack(N,W-wt[N-1],val,wt),knapSack(N-1,W,val,wt));
        }
        else{
            return T[N][W]=knapSack(N-1,W,val,wt);
        }
    }
    //Tabulation
    int knapSack(int N, int W, int val[], int wt[])
    {
        
        int T[N+1][W+1];
        for(int i=0;i<N+1;i++){
            for(int j=0;j<W+1;j++){
                if(i==0 || j==0){
                    T[i][j]=0;
                }
                
            }
        }
        for(int i=1;i<N+1;i++){
            for(int j=1;j<W+1;j++){
                if(wt[i-1]<=j){
                    T[i][j]=max(val[i-1]+T[i][j-wt[i-1]],T[i-1][j]);
                }
                else{
                    T[i][j]=T[i-1][j];
                }
            }
        }
        return T[N][W];
    }
