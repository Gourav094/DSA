//Recursive way
bool subset(int arr[],int n,int sum){
    if(sum==0){
        return true;

    }
    if(n==0){
        return false;
    }
    if(arr[n-1]<=sum){
        return (subset(arr,n-1,sum-arr[n-1]) || subset(arr,n-1,sum));
    }
    else return subset(arr,n-1,sum);
}
//Memoize
int T[100][100];
bool subset(int arr[],int n,int sum){
    memset(T,-1,sizeof(T));
    if(sum==0){
        return true;

    }
    if(n==0){
        return false;
    }
    if(T[n][sum]!=-1){
        return T[n][sum];
    }
    if(arr[n-1]<=sum){
        return T[n][sum]=(subset(arr,n-1,sum-arr[n-1]) || subset(arr,n-1,sum));
    }
    else return T[n][sum]=subset(arr,n-1,sum);
}

//Tabulation
bool subset(int arr[],int n,int sum){
    int T[n][sum];
    for(int i=0;i<n;i++){
        for(int j=0;j<sum;j++){
            if(i==0){
                T[i][j]=false;
            }
            if(j==0){
                T[i][j]=true;
            }
        }
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<sum;j++){
            if(arr[i-1]<=j){
                T[i][j]=T[i-1][j] || T[i-1][j-arr[i-1]];
            }
            else {
                T[i][j]=T[i-1][j];
            }
        }
    }
    return T[n][sum];
}
