//memoization
int t[501][501];
    bool ispalindrome(string s,int i,int j){
        if(i>=j){
            return true;
        }
        while(i<j){
            if(s[i]!=s[j]){
                return false;
            }
            i++;j--;
        }
        return true;
    }
    int solve(string s,int i,int j){
        if(i>=j){
            return 0;
        }
        if(t[i][j]!=-1){
            return t[i][j];
        }
        if(ispalindrome(s,i,j)==true){
            return 0;
        }
        int temp,m=INT_MAX;
        for(int k=i;k<=j-1;k++){
            temp=1+solve(s,i,k)+solve(s,k+1,j);
            if(temp<m){
                m=temp;
            }
        }
        return t[i][j]=m;
    }
   
//memoized optization
int t[501][501];
    bool ispalindrome(string s,int i,int j){
        if(i>=j){
            return true;
        }
        while(i<j){
            if(s[i]!=s[j]){
                return false;
            }
            i++;j--;
        }
        return true;
    }
    int solve(string s,int i,int j){
        if(i>=j){
            return 0;
        }
        if(t[i][j]!=-1){
            return t[i][j];
        }
        if(ispalindrome(s,i,j)==true){
            return 0;
        }
        int temp,m=INT_MAX;
        for(int k=i;k<=j-1;k++){
            int left=0,right=0;
            if(t[i][k]!=-1){
                left=t[i][k];
            }
            else{
                left=solve(s,i,k);
                t[i][k]=left;
            }
            if(t[k+1][j]!=-1){
                right=t[k+1][j];
            }
            else{
                right=solve(s,k+1,j);
                t[k+1][j]=right;
            }
            temp=1+left+right;
            if(temp<m){
                m=temp;
            }
        }
        return t[i][j]=m;
    }
    int palindromicPartition(string str)
    {
        // code here
        memset(t,-1,sizeof(t));
        return solve(str,0,str.length()-1);
    }
