//Recursive solution
int knapSack(int W, int wt[], int val[], int n) 
{ 
   // Your code here
   if(n==0 || W==0){
       return 0;
   }
   if(wt[n-1]<=W){
       return max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n-1));
   }
   else {
       return knapSack(W,wt,val,n-1);
   }
}

//Memoize solution
int T[1002][1002];
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        memset(T,-1,sizeof(T));
        
       // Your code here
       if(n==0 || W==0){
           return 0;
       }
       if(T[n][W]!=-1){
           return T[n][W];
       }
       
       if(wt[n-1]<=W){
           return T[n][W]=max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n-1));
       }
       else {
           return T[n][W]=knapSack(W,wt,val,n-1);
       }
    }
    
    //Tabulation method
    
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       int T[n+1][W+1];

       for(int i=0;i<n+1;i++){
           for(int j=0;j<W+1;j++){
               if(i==0 || j==0){
                   T[i][j]=0;
               }
           }
       }
       for(int i=1;i<n+1;i++){
           for(int j=1;j<W+1;j++){
               if(wt[i-1]<=j){
                   T[i][j]=max(val[i-1]+T[i-1][j-wt[i-1]],T[i-1][j]);
               }
               else{
                   T[i][j]=T[i-1][j];
               }
           }
       }
       return T[n][W];
    }
