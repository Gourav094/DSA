//Recover BST
class Solution {
    TreeNode* first;
    TreeNode* middle;
    TreeNode* last;
    TreeNode* prev;
    private:
    void Inorder(TreeNode* root){
        if(root==NULL)return;
        Inorder(root->left);
        if(prev !=NULL && root->val < prev->val)
        {
            if(first==NULL){
                first=prev;
                middle=root;
            }
            else{
                last=root;
            }
        }
        prev=root;
        Inorder(root->right);
    }

public:
    
    
    void recoverTree(TreeNode* root) {
        first=middle=last=NULL;
        prev=new TreeNode(INT_MIN);
        Inorder(root);
        if(first && last) swap(first->val, last->val); 
        else if(first && middle) swap(first->val, middle->val); 
    }
};