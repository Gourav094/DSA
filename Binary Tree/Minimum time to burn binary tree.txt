//minimum Time to burn BinaryTree

BinaryNode* Parent(BinaryNode* root,map<BinaryNode*,BinaryNode*>& p,int start){
    queue<BinaryNode*> q;
    q.push(root);
    BinaryNode* res;
    while(!q.empty()){
        BinaryNode* current=q.front();
        q.pop();
        if(current->data == start){
            res=current;
        }
        if(current->left){
            p[current->left]=current;
            q.push(current->left);
        }
        if(current->right){
            p[current->right]=current;
            q.push(current->right);
        }
    }
    return res;
}

int Burn(BinaryNode* root,int start){
    map<BinaryNode*,BinaryNode*>p;
    BinaryNode* target=Parent(root,p,start);
    map<BinaryNode*,bool> visited;
    visited[target]=true;
    queue<BinaryNode*> q;
    int time=0;
    q.push(target);
    while(!q.empty()){
        int size=q.size();
        int f=0;
        for(int i=0;i<size;i++){
            BinaryNode* cur=q.front();
            q.pop();
            if(cur->left && !visited[cur->left]){
                f=1;
                visited[cur->left]=true;
                q.push(cur->left);
            }
            if(cur->right && !visited[cur->right]){
                f=1;
                visited[cur->right]=true;
                q.push(cur->right);
            }
            if(p[cur] && !visited[p[cur]]){
                f=1;
                q.push(p[cur]);
                visited[p[cur]]=true;
            }
            
        }
        if(f){
            time++;
        }
    }
    return time;
}