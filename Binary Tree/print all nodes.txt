//Print all nodes k distance
/**
 * Definition for a Tree tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

    
void Parent(TreeNode* root,unordered_map<TreeNode*,TreeNode*> &m,TreeNode* target){
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty()){
        TreeNode* current=q.front();
        q.pop();
        if(current->left){
            m[current->left]=current;
            q.push(current->left);
        }
        if(current->right){
            m[current->right]=current;
            q.push(current->right);
        }
    }
}
vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
    vector<int>ans; 
    unordered_map<TreeNode*,TreeNode*> p;
    Parent(root,p,target);

    unordered_map<TreeNode*,bool> visited;

    queue<TreeNode*> q;
    q.push(target);
    int cur=0;
    visited[target]=true;
    while(!q.empty()){
    int size=q.size();
    if(cur++ == k) break;
    //cur++;
    for(int i=0;i<size;i++){
        TreeNode* current=q.front();
        q.pop();
        if(current->left && !visited[current->left]){
            q.push(current->left);
            visited[current->left]=true;
        }
        if(current->right && !visited[current->right]){
            q.push(current->right);
            visited[current->right]=true;
        }
        if(p[current] && !visited[p[current]]){
            q.push(p[current]);
            visited[p[current]]=true;
        }
    }
    
    }
while(!q.empty()){
    TreeNode* cur=q.front();
    q.pop();
    ans.push_back(cur->val);
}
return ans;
}
