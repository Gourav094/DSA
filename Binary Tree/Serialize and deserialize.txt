//Serialize and deserialize
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
string serialize(TreeNode* root) {
    if(!root){
        return "";
    }
    string s="";
    queue<TreeNode*>q;
    q.push(root);
    while(!q.empty()){
        TreeNode* cur=q.front();
        q.pop();
        if(cur==NULL){
            s.append("#,");
        }
        else{
            s.append(to_string(cur->val)+',');
        }
        
        if(cur!=NULL){
            q.push(cur->left);
            q.push(cur->right);
        }
    }
    return s;
}

TreeNode* deserialize(string data) {
    if(data.size()==0){
        return NULL;
    }
    stringstream s(data);
    string str;
    getline(s,str,',');
    queue<TreeNode*>q;
    TreeNode* root=new TreeNode(stoi(str));
    q.push(root);
    while(!q.empty()){
        TreeNode* node=q.front();
        q.pop();
        getline(s,str,',');
        if(str == "#"){
            node->left=NULL;
        }
        else{
            TreeNode* leftnode=new TreeNode(stoi(str));
            node->left=leftnode;
            q.push(leftnode);
        }
        getline(s,str,',');
        if(str=="#"){
            node->right=NULL;
        }
        else{
            TreeNode* rightnode=new TreeNode(stoi(str));
            node->right=rightnode;
            q.push(rightnode);
        }
    }
    return root;

}